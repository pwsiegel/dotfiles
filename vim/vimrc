" Plugins (via plugged)
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-commentary'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'altercation/vim-colors-solarized'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ervandew/supertab'
" Plug 'jiangmiao/auto-pairs'
Plug 'PProvost/vim-markdown-jekyll'
Plug 'lervag/vimtex'
Plug 'w0rp/ale'
Plug 'isruslan/vim-es6'
Plug 'mxw/vim-jsx'
Plug 'prettier/vim-prettier', {
\ 'do': 'yarn install',
\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'vue']
\}
call plug#end()

" Basic Settings
filetype plugin indent on
syntax on
set noswapfile
set background=dark
" let g:solarized_termcolors=256
colorscheme solarized
set wildignore=*.pyc
set visualbell
set noerrorbells
set colorcolumn=80
set number
set hlsearch
set clipboard^=unnamed " copy to the system clipboard

" Mouse
set mouse=a
map <LeftMouse> <nop>
map <2-LeftMouse> <nop>

" Indentation
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" Map arrow keys to buffer switching
nnoremap <Left> :bp<CR>
nnoremap <Right> :bn<CR>
" But ignore when in nerdtree/ctrlsf
autocmd FileType nerdtree noremap <buffer> <Left> <nop>
autocmd FileType nerdtree noremap <buffer> <Right> <nop>
map <up> <nop>
map <down> <nop>

" Configure airline
let g:airline#extensions#ale#enabled = 1
" Install Roboto Light from https://github.com/powerline/fonts
let g:airline_powerline_fonts = 1
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
" Status bar
let g:airline_theme='luna'

" Mappings
let mapleader=" "
map <leader>s :source ~/.vim/vimrc<CR>:nohls<CR>
map <leader>gs :Gstatus<CR>
map <leader>h :nohls<CR>
noremap <C-l> :tabn<CR>
noremap <C-h> :tabp<CR>
set pastetoggle=<leader>p

" Nerdtree Settings
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeQuitOnOpen = 1

" Setup ctrlp"
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|build'
let g:ctrlp_open_multiple_files = 'ij'
if executable("ag")
    let g:ctrlp_user_command = 'ag %s -l --nocolor --depth 8 -g ""'
endif

" Ale Settings
let g:ale_pattern_options = {'.*\.tex$': {'ale_enabled': 0}}
nmap <silent> <leader>W <Plug>(ale_previous_wrap)
nmap <silent> <leader>w <Plug>(ale_next_wrap)

" Supertab Settings
let g:SuperTabDefaultCompletionType = "context"

" Jedi-Vim Settings
let g:jedi#popup_on_dot = 0

" JS
let g:prettier#autoformat = 0
let g:prettier#quickfix_auto_focus = 0
let g:prettier#config#tab_width = 4
let g:prettier#config#print_width = 140
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#trailing_comma = 'es5'
let g:prettier#config#jsx_bracket_same_line = 'false'
set suffixesadd+=.js
let g:jsx_ext_required = 0 " Allow JSX in normal JS files
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.vue PrettierAsync

" Jekyll / Markdown / Mathjax
" TODO Figure out how to offload this into a separate file
autocmd BufRead,BufNewFile,BufEnter *.md,*.markdown set filetype=markdown

function! MathAndLiquid()
    "" Define certain regions
    " Block math. Look for "$$[anything]$$"
    syn region math start=/\$\$/ end=/\$\$/
    " inline math. Look for "$[not $][anything]$"
    syn match math_block '\$[^$].\{-}\$'

    " Liquid single line. Look for "{%[anything]%}"
    syn match liquid '{%.*%}'
    " Liquid multiline. Look for "{%[anything]%}[anything]{%[anything]%}"
    syn region highlight_block start='{% highlight .*%}' end='{%.*%}'
    " Fenced code blocks, used in GitHub Flavored Markdown (GFM)
    syn region highlight_block start='```' end='```'

    "" Actually highlight those regions.
    hi link math Statement
    hi link liquid Statement
    hi link highlight_block Function
    hi link math_block Function
endfunction

autocmd BufRead,BufNewFile,BufEnter *.md,*.markdown call MathAndLiquid()
