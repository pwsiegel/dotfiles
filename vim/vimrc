" Plugins (via plugged)
call plug#begin('~/.vim/plugged')
    Plug 'tpope/vim-sensible' " Sensible vim defaults
    Plug 'tpope/vim-abolish' " Handles word variations, e.g. converting between snake case and camel case
    Plug 'tpope/vim-fugitive' " Git integration for vim
    Plug 'tpope/vim-repeat' " Remaps . so that it repeats maps properly, rather than just the last native command
    Plug 'tpope/vim-unimpaired' " Various handy mappings, e.g. [<space> adds newlines above and [e swaps with line above
    Plug 'tpope/vim-surround' " Motions for adding / removing / changing surrounding brackets / quotes
    Plug 'tpope/vim-ragtag' " Editing HTML-style tags
    Plug 'tpope/vim-commentary' " Adds gcc to comment a line, or gc motion to comment multiple lines
    Plug 'arnar/vim-matchopen' " Highlights unclosed parentheses
    Plug 'flazz/vim-colorschemes' " Color schemes for vim
    Plug 'vim-airline/vim-airline' " Vim status bar
    Plug 'vim-airline/vim-airline-themes' " Themes for vim-airline
    Plug 'vimwiki/vimwiki' " Vim-powered wiki mode
    " Plug 'tbabej/taskwiki' " Integration between vimwiki and taskwarrior
    Plug 'ctrlpvim/ctrlp.vim' " Easy file navigation with <C-p>
    Plug 'scrooloose/nerdtree' " File tree navigation UI
    Plug 'Xuyuanp/nerdtree-git-plugin' " Adds git status indicators to nerdtree
    Plug 'airblade/vim-gitgutter' " Adds git status indicators to gutter, and staging commands
    Plug 'SirVer/ultisnips' " Supports custom completion from trigger string to code snippet
    " Plug 'honza/vim-snippets' " Library of language-specific defaults for ultisnips
    Plug 'ervandew/supertab' " Tab completion
    Plug 'michaeljsmith/vim-indent-object' " Creates text objects from indented blocks
    Plug 'w0rp/ale' " Asynchronous Linting Engine - supports many languages
    Plug 'davidhalter/jedi-vim' " Python autocompletion / goto def / rename / etc.
    Plug 'isruslan/vim-es6' " Vim support for Javascript ES6 standard
    Plug 'mxw/vim-jsx' " Vim support for JSX syntax (React)
    Plug 'prettier/vim-prettier', {
    \ 'do': 'yarn install',
    \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'vue', 'html']
    \} " Automatic syntax checker / fixer for Javascript
call plug#end()

" Basic settings - vim defaults, folding, indentation
    filetype plugin indent on " Allow filetype plugins
    syntax on " Enable syntax highlighting
    syntax sync minlines=10000
    set nocompatible " Disable backward compatibility with vi
    set noswapfile " Don't create swap files when buffers are open
    set updatetime=50
    set hidden " Allow switching between unsaved buffers
    set hlsearch " Highlight search results
    set clipboard^=unnamed " copy to the system clipboard
    set number
    " Folding - indent, level 0
        set foldmethod=indent " Fold code along indentation
        set foldlevelstart=0 " Newly open files open 0 levels of folding
        set foldopen-=block " Vim motions like } will not open folds
    " Indentation - all indents, including tab key, are 4 spaces
        set tabstop=8
        set shiftwidth=4
        set softtabstop=0
        set expandtab
        set smarttab

" Cosmetics - colors, airline
    colorscheme solarized
    set background=dark " https://vi.stackexchange.com/questions/12104/what-does-set-background-dark-do
    set colorcolumn=88
    set belloff=all
    " Gitgutter cosmetics
        highlight! link SignColumn LineNr
    " Airline
        let g:airline#extensions#ale#enabled = 1
        " Install Roboto Light from https://github.com/powerline/fonts
        let g:airline_powerline_fonts = 1
        " Enable the list of buffers
        let g:airline#extensions#tabline#enabled = 1
        " Show just the filename
        let g:airline#extensions#tabline#fnamemod = ':t'
        " Status bar
        let g:airline_theme='luna'

" Navigation - Nerdtree, Ctrlp
    " Nerdtree
        map <C-n> :NERDTreeToggle<CR>
        let g:NERDTreeQuitOnOpen = 1
        autocmd FileType nerdtree noremap <buffer> <Left> <nop>
        autocmd FileType nerdtree noremap <buffer> <Right> <nop>
    " Ctrlp
        let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|build'
        let g:ctrlp_open_multiple_files = 'ij'
        if executable("ag")
            let g:ctrlp_user_command = 'ag %s -l --nocolor --depth 8 -g ""'
        endif

" IDE features - completion, linting, snippets
    " Completion
        let g:SuperTabDefaultCompletionType = "context"
        let g:SuperTabContextDefaultCompletionType = "<C-n>"
        let g:jedi#popup_on_dot = 0
        set completeopt=longest,menuone
        let g:ale_linters = {
            \'python': ['flake8', 'mypy'],
            \'vimwiki': []
        \}
        let g:ale_fixers = {
            \'python': ['black', 'isort'],
            \'*': ['remove_trailing_lines', 'trim_whitespace'],
        \}
        let g:ale_fix_on_save = 1
    " Snippets
        let g:UltiSnipsJumpForwardTrigger = ">"
        let g:UltiSnipsJumpBackwardTrigger = "<"
        let g:UltiSnipsSnippetDirectories=["UltiSnips", "custom_snippets"]
" Vimwiki
    let g:vimwiki_list = [
        \{'path': '~/bw/paul-work/vimwiki', 'syntax': 'markdown', 'ext': '.md'},
        \{'path': '~/pwsiegel/pwsiegel.github.io/_posts', 'syntax': 'markdown', 'ext': '.md'}
    \]
    let g:vimwiki_table_mappings = 0 " Frees up <tab> for completing snippets
    let g:vimwiki_global_ext = 0
    " let g:taskwiki_markup_syntax = 'markdown'
    " let g:taskwiki_disable_concealcursor = 'true'

source ~/dotfiles/vim/mappings.vim
source ~/dotfiles/vim/javascript.vim
source ~/dotfiles/vim/math_blog.vim
